#!/usr/bin/env ruby
require 'ostruct'
require 'optparse'

options = OpenStruct.new({
  :includes => [],
  :excludes => [],
  :signal => 'KILL',
  :target_parent => false
})

parser = OptionParser.new do |config|
  config.banner = "Usage: snipe [options]"
  config.separator ""
  config.separator "Target a process for signals using include/exclude regex"
  config.separator "patterns and memory use, cpu use or time alive conditions."
  config.separator "By default, this sends KILL (9) to the targetted process,"
  config.separator "but options can be used to override the signal or to "
  config.separator "target the parent process instead."
  config.separator ""
  config.separator "Options:"

  desc = "Pattern that must be matched for a process to be included"
  config.on("-i", "--include [PATTERN]", desc) do |pattern|
    options.includes << /#{pattern}/i
  end

  desc = "Pattern that must NOT be matched for a process to be included"
  config.on("-e", "--exclude [PATTERN]", desc) do |pattern|
    options.excludes << /#{pattern}/i
  end

  desc = "Processes using more than some bytes size of memory"
  config.on("-m", "--memory [BYTES]", desc) do |bytes|
    options.bytes = bytes.to_i
  end

  desc = "Processes using more than a percentage of CPU"
  config.on("-c", "--cpu [PERCENTAGE]", desc) do |cpu|
    options.cpu = cpu.to_f
  end

  desc = "Processes that have been alive for some length of time in seconds"
  config.on("-a", "--alive [SECONDS]", desc) do |sec|
    options.alive = sec.to_i
  end

  desc = "Signal to send to the targetted process or its parent.  Defaults to KILL."
  config.on("-s", "--signal [SIGNAL]", desc) do |signal|
    options.signal = signal
  end

  desc = "Send the signal to the parent of the targetted process"
  config.on("-p", "--parent", desc) do
    options.target_parent = true
  end

  desc = "Perform a dry run which will identify processes to be targetted but not send any signals"
  config.on("-d", "--dry-run", desc) do
    options.no_signals = true
  end

  desc = "Use the pkill utility to send the signal (targetted process only)"
  config.on("--pkill", desc) do
    options.pkill = true
  end
end.parse!

# TODO remove me
$: << 'lib'

require 'snipr'
output = Snipr::Output.new

if options.includes.empty?
  output.err("error - You must specify an include pattern with -i")
  Kernel.exit(-1)
end

unless options.bytes || options.keys || options.alive
  output.err("error - You must specify at least one of -m, -c or -a")
  Kernel.exit(-1)
end

output.info("*** DRY RUN ***") if options.no_signals

signaller = Snipr::ProcessSignaller.new do |signaller|
  options.includes.each do |pattern|
    signaller.include pattern
  end
  options.excludes.each do |pattern|
    signaller.exclude pattern
  end
  signaller.signal          options.signal
  signaller.target_parent   options.target_parent
  signaller.pkill if options.pkill
  signaller.dry_run if options.no_signals

  if options.bytes
    signaller.memory_greater_than(options.bytes)
  end

  if options.cpu
    signaller.cpu_greater_than(options.cpu)
  end

  if options.alive
    signaller.alive_longer_than(options.alive)
  end

  signaller.on_no_processes do
    output.info("no runaways found")
  end

  signaller.after_signal do |signal, process|
    if options.target_parent
      msg = "sent #{signal} to process #{process.ppid} to act on child " +
            "#{process.pid}"
    else
      msg = "sent #{signal} to process #{process.pid}"
    end

    output.info(msg)

    msg = "memory:#{process.memory} cpu:#{process.cpu} time_alive: " +
          "#{process.seconds_alive} command: #{process.command}"
    output.info(msg)
  end

  signaller.on_error do |error, signal, process|
    raise error
    if signal && process
      if options.target_parent
        msg = "error sending #{signal} to #{process.ppid} to act on " +
              "#{process.pid}: #{error}"
      else
        msg = "error sending #{signal} to #{process.pid}: #{error}"
      end
    else
      msg = "error: #{error}"
    end
    output.err(msg)
    Kernel.exit(-1)
  end
end

signaller.send_signals
